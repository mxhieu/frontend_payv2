{"ast":null,"code":"import loginActionTypes from '../actionTypes/login.actiontypes';\nimport Api from '.././utils/Api';\nimport ApiConfig from '../config/ApiConfig';\nimport isLoading from \"./isloading.actions\";\nconst loginAction = {};\n\nloginAction.Login = (username, password) => {\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.login + '?username=' + username + '&password=' + password;\n  return async dispatch => {\n    dispatch(isLoading.showLoader());\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(loginAction.success(result));\n      } else {\n        dispatch(loginAction.failure(result));\n      }\n    });\n    dispatch(isLoading.hideLoader());\n  };\n};\n\nloginAction.loginFacebookRequest = accessToken => {\n  let endpoint = 'https://graph.facebook.com/me?fields=token_for_business&access_token=' + accessToken;\n  return async dispatch => {\n    //Get bussiness token\n    dispatch(isLoading.showLoader());\n    await Api.call('GET', endpoint).then(res => {\n      if (res.status === 200 && res.data.token_for_business) {\n        dispatch(loginAction.loginFacebook(accessToken, res.data.token_for_business));\n      }\n    });\n    dispatch(isLoading.hideLoader());\n  };\n};\n\nloginAction.loginFacebook = bussinessToken => {\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.loginFb + \"?tokenForBusiness=\" + bussinessToken;\n  return async dispatch => {\n    //Get data form api\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(loginAction.success(result));\n      } else {\n        dispatch(loginAction.failure(result));\n      }\n    });\n  };\n};\n\nloginAction.loginGoogle = email => {\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.loginGg + \"?email=\" + email;\n  return async dispatch => {\n    //Get data form api\n    dispatch(isLoading.showLoader());\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(loginAction.success(result));\n      } else {\n        dispatch(loginAction.failure(result));\n      }\n    });\n    dispatch(isLoading.hideLoader());\n  };\n};\n\nloginAction.LoginApple = sub => {\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.loginApple + \"?sub=\" + email;\n  return async dispatch => {\n    //Get data form api\n    dispatch(isLoading.showLoader());\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(loginAction.success(result));\n      } else {\n        dispatch(loginAction.failure(result));\n      }\n    });\n    dispatch(isLoading.hideLoader());\n  };\n};\n\nloginAction.success = result => {\n  return {\n    type: loginActionTypes.LOGIN_SUCCESS,\n    result\n  };\n};\n\nloginAction.failure = result => {\n  return {\n    type: loginActionTypes.LOGIN_FAILURE,\n    result\n  };\n};\n\nloginAction.logout = () => {\n  return {\n    type: loginActionTypes.LOGOUT\n  };\n};\n\nexport default loginAction;","map":{"version":3,"sources":["C:/reactjs/payv2/pay-v2.phoeniz.com/src/actions/login.actions.js"],"names":["loginActionTypes","Api","ApiConfig","isLoading","loginAction","Login","username","password","endpoint","domain","login","dispatch","showLoader","call","then","result","data","status","success","failure","hideLoader","loginFacebookRequest","accessToken","res","token_for_business","loginFacebook","bussinessToken","loginFb","loginGoogle","email","loginGg","LoginApple","sub","loginApple","type","LOGIN_SUCCESS","LOGIN_FAILURE","logout","LOGOUT"],"mappings":"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","sourcesContent":["import loginActionTypes from '../actionTypes/login.actiontypes';\r\nimport Api from '.././utils/Api';\r\nimport ApiConfig from '../config/ApiConfig';\r\nimport isLoading from \"./isloading.actions\";\r\n\r\nconst loginAction = {};\r\n\r\nloginAction.Login = (username, password) => {\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.login + '?username='+ username + '&password=' + password;\r\n    return async (dispatch) => {\r\n        dispatch(isLoading.showLoader())\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                dispatch(loginAction.success(result))\r\n            }\r\n            else{\r\n                dispatch(loginAction.failure(result))\r\n            }\r\n        })\r\n        dispatch(isLoading.hideLoader())\r\n    }\r\n}\r\n\r\nloginAction.loginFacebookRequest = (accessToken) => {\r\n    let endpoint = 'https://graph.facebook.com/me?fields=token_for_business&access_token='+accessToken;\r\n    return async (dispatch) => {\r\n        //Get bussiness token\r\n        dispatch(isLoading.showLoader())\r\n        await Api.call('GET', endpoint ).then(res => {\r\n            if(res.status === 200 && res.data.token_for_business)\r\n            {\r\n                dispatch(loginAction.loginFacebook(accessToken, res.data.token_for_business));\r\n            }            \r\n        })\r\n        dispatch(isLoading.hideLoader())\r\n    }\r\n}\r\n\r\nloginAction.loginFacebook = (bussinessToken) => {\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.loginFb + \"?tokenForBusiness=\"+ bussinessToken;\r\n    return async (dispatch) => {\r\n        //Get data form api\r\n        await Api.call('GET', endpoint ).then(result => {\r\n            if(result.data.status === 1){\r\n                dispatch(loginAction.success(result))\r\n            }\r\n            else{\r\n                dispatch(loginAction.failure(result))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nloginAction.loginGoogle = (email) => {\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.loginGg + \"?email=\"+ email;\r\n    return async (dispatch) => {\r\n        //Get data form api\r\n        dispatch(isLoading.showLoader())\r\n        await Api.call('GET', endpoint ).then(result => {\r\n            if(result.data.status === 1){\r\n                dispatch(loginAction.success(result))\r\n            }\r\n            else{\r\n                dispatch(loginAction.failure(result))\r\n            }\r\n        })\r\n        dispatch(isLoading.hideLoader())\r\n    }\r\n}\r\n\r\nloginAction.LoginApple = (sub) => {\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.loginApple + \"?sub=\"+ email;\r\n    return async (dispatch) => {\r\n        //Get data form api\r\n        dispatch(isLoading.showLoader())\r\n        await Api.call('GET', endpoint ).then(result => {\r\n            if(result.data.status === 1){\r\n                dispatch(loginAction.success(result))\r\n            }\r\n            else{\r\n                dispatch(loginAction.failure(result))\r\n            }\r\n        })\r\n        dispatch(isLoading.hideLoader())\r\n    }\r\n}\r\n\r\nloginAction.success = (result) => {\r\n    return {\r\n        type: loginActionTypes.LOGIN_SUCCESS,\r\n        result\r\n    };\r\n}\r\n\r\nloginAction.failure = (result) => {\r\n    return {\r\n        type: loginActionTypes.LOGIN_FAILURE,\r\n        result\r\n    };\r\n}\r\n\r\nloginAction.logout = () => {\r\n    return {\r\n        type: loginActionTypes.LOGOUT,\r\n    };\r\n}\r\n\r\nexport default loginAction;"]},"metadata":{},"sourceType":"module"}