{"ast":null,"code":"import paymentActionTypes from '../actionTypes/payment.actiontypes';\nimport Api from '../utils/Api';\nimport ApiConfig from '../config/ApiConfig';\nimport isLoadingAction from \"./isloading.actions\";\nconst paymentActions = {};\n\npaymentActions.chargeCardRequest = params => {\n  let md5 = require('md5');\n\n  let sign = md5(params.username + ApiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeCard + '?serial=' + params.txtSerie + '&code=' + params.txtCardPin + '&username=' + params.username + '&productAgent=' + params.gameInfo.agent + '&type=' + params.sltCardType + '&server_id=' + params.sltServer + '&sign=' + sign + '';\n  return async dispatch => {\n    dispatch(isLoadingAction.showLoader());\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1 || result.data.status === 0) {\n        dispatch(paymentActions.chargeCard(result));\n      }\n    });\n    dispatch(isLoadingAction.hideLoader());\n  };\n};\n\npaymentActions.chargeCard = result => {\n  return {\n    type: paymentActionTypes.CHARGE_CARD,\n    result\n  };\n};\n\npaymentActions.chargeAtmRequest = params => {\n  let md5 = require('md5');\n\n  let sign = md5(params.username + ApiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeAtm + '?amount=' + params.sltAmount + '&username=' + params.username + '&productAgent=' + params.gameInfo.agent + '&roleId=' + params.sltRoleId + '&server_id=' + params.sltServer + '&sign=' + sign + '';\n  return async dispatch => {\n    dispatch(isLoadingAction.showLoader());\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        window.location.href = result.data.data.link;\n      }\n    });\n  };\n};\n\npaymentActions.getUserRoleRequest = (serverId, userId, agent) => {\n  let md5 = require('md5');\n\n  let sign = md5(userId + ApiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.getRole + '?server_id=' + serverId + '&id_user=' + userId + '&productAgent=' + agent + '&sign=' + sign;\n  return async dispatch => {\n    isLoadingAction.showLoader();\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(paymentActions.getUserRole(result));\n      }\n    });\n    isLoadingAction.hideLoader();\n  };\n};\n\npaymentActions.chargeAtmSuccess = paramStr => {\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.paymentWalletChargeATMSuccess + paramStr;\n  console.log(endpoint);\n  return async dispatch => {\n    await Api.call('GET', endpoint).then(result => {\n      dispatch(paymentActions.rsChargeAtmSuccess(result));\n    });\n  };\n};\n\npaymentActions.rsChargeAtmSuccess = result => {\n  return {\n    type: paymentActionTypes.CHARGE_ATM_SUCCESS,\n    result\n  };\n};\n\npaymentActions.getUserRole = result => {\n  return {\n    type: paymentActionTypes.GET_USER_ROLE,\n    result\n  };\n};\n\nexport default paymentActions;","map":{"version":3,"sources":["C:/reactjs/payv2/pay-v2.phoeniz.com/src/actions/payment.actions.js"],"names":["paymentActionTypes","Api","ApiConfig","isLoadingAction","paymentActions","chargeCardRequest","params","md5","require","sign","username","jwtToken","endpoint","domain","chargeCard","txtSerie","txtCardPin","gameInfo","agent","sltCardType","sltServer","dispatch","showLoader","call","then","result","data","status","hideLoader","type","CHARGE_CARD","chargeAtmRequest","chargeAtm","sltAmount","sltRoleId","window","location","href","link","getUserRoleRequest","serverId","userId","getRole","getUserRole","chargeAtmSuccess","paramStr","paymentWalletChargeATMSuccess","console","log","rsChargeAtmSuccess","CHARGE_ATM_SUCCESS","GET_USER_ROLE"],"mappings":"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","sourcesContent":["import paymentActionTypes from '../actionTypes/payment.actiontypes';\r\nimport Api from '../utils/Api';\r\nimport ApiConfig from '../config/ApiConfig';\r\nimport isLoadingAction from \"./isloading.actions\";\r\nconst paymentActions = {};\r\n\r\npaymentActions.chargeCardRequest = (params) => {\r\n    let md5 = require('md5')\r\n    let sign = md5(params.username + ApiConfig.jwtToken)\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeCard + '?serial='+params.txtSerie+'&code='+params.txtCardPin+'&username='+params.username+'&productAgent='+params.gameInfo.agent+'&type='+params.sltCardType+'&server_id='+params.sltServer+'&sign='+sign+'';\r\n    return async (dispatch) => {\r\n        dispatch(isLoadingAction.showLoader())\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1 || result.data.status === 0){\r\n                dispatch(paymentActions.chargeCard(result))\r\n            }\r\n        })\r\n        dispatch(isLoadingAction.hideLoader())\r\n    }\r\n}\r\n\r\npaymentActions.chargeCard = (result) => {\r\n    return {\r\n        type: paymentActionTypes.CHARGE_CARD,\r\n        result\r\n    }\r\n}\r\n\r\npaymentActions.chargeAtmRequest = (params) => {\r\n    let md5 = require('md5')\r\n    let sign = md5(params.username + ApiConfig.jwtToken)\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeAtm + '?amount='+params.sltAmount+'&username='+params.username+'&productAgent='+params.gameInfo.agent+'&roleId='+params.sltRoleId+'&server_id='+params.sltServer+'&sign='+sign+'';\r\n    return async (dispatch) => {\r\n        dispatch(isLoadingAction.showLoader())\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                window.location.href = result.data.data.link;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\npaymentActions.getUserRoleRequest = (serverId, userId, agent) => {\r\n    let md5 = require('md5')\r\n    let sign = md5(userId + ApiConfig.jwtToken)\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.getRole + '?server_id=' + serverId+'&id_user='+userId+'&productAgent='+agent+'&sign='+sign;\r\n    return async (dispatch) => {\r\n        isLoadingAction.showLoader()\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                dispatch(paymentActions.getUserRole(result))\r\n            }\r\n        })\r\n        isLoadingAction.hideLoader();\r\n    }\r\n}\r\n\r\npaymentActions.chargeAtmSuccess = (paramStr) => {\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.paymentWalletChargeATMSuccess + paramStr;\r\n    console.log(endpoint)\r\n    return async (dispatch) => {\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            dispatch(paymentActions.rsChargeAtmSuccess(result))\r\n        })\r\n    }\r\n}\r\n\r\npaymentActions.rsChargeAtmSuccess = (result) => {\r\n    return {\r\n        type: paymentActionTypes.CHARGE_ATM_SUCCESS,\r\n        result\r\n    }\r\n}\r\n\r\npaymentActions.getUserRole = (result) => {\r\n    return {\r\n        type: paymentActionTypes.GET_USER_ROLE,\r\n        result\r\n    }\r\n}\r\n\r\nexport default paymentActions;"]},"metadata":{},"sourceType":"module"}