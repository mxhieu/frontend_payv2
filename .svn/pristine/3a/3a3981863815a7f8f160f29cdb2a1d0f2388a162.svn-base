{"ast":null,"code":"import paymentActionTypes from '../actionTypes/payment.actiontypes';\nimport Api from '../utils/Api';\nimport ApiConfig from '../config/ApiConfig';\nconst paymentActions = {};\n\npaymentActions.chargeCardRequest = params => {\n  let md5 = require('md5');\n\n  let sign = md5(params.username + ApiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeCard + '?serial=' + params.txtSerie + '&code=' + params.txtCardPin + '&username=' + params.username + '&productAgent=' + params.gameInfo.agent + '&type=' + params.sltCardType + '&server_id=' + params.sltServer + '&sign=' + sign + '';\n  console.log(params);\n  return async dispatch => {\n    await Api.call('GET', endpoint).then(result => {\n      console.log(result);\n\n      if (result.data.status === 1) {\n        dispatch(paymentActions.chargeCard(result));\n      }\n    });\n  };\n};\n\npaymentActions.chargeCard = result => {\n  return {\n    type: paymentActionTypes.CHARGE_CARD,\n    result\n  };\n};\n\nexport default paymentActions;","map":{"version":3,"sources":["C:/reactjs/payv2/myapp/src/actions/payment.actions.js"],"names":["paymentActionTypes","Api","ApiConfig","paymentActions","chargeCardRequest","params","md5","require","sign","username","jwtToken","endpoint","domain","chargeCard","txtSerie","txtCardPin","gameInfo","agent","sltCardType","sltServer","console","log","dispatch","call","then","result","data","status","type","CHARGE_CARD"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,oCAA/B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,MAAMC,cAAc,GAAG,EAAvB;;AAEAA,cAAc,CAACC,iBAAf,GAAoCC,MAAD,IAAY;AAC3C,MAAIC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,MAAIC,IAAI,GAAGF,GAAG,CAACD,MAAM,CAACI,QAAP,GAAkBP,SAAS,CAACQ,QAA7B,CAAd;AACA,MAAIC,QAAQ,GAAGT,SAAS,CAACU,MAAV,GAAmBV,SAAS,CAACS,QAAV,CAAmBE,UAAtC,GAAmD,UAAnD,GAA8DR,MAAM,CAACS,QAArE,GAA8E,QAA9E,GAAuFT,MAAM,CAACU,UAA9F,GAAyG,YAAzG,GAAsHV,MAAM,CAACI,QAA7H,GAAsI,gBAAtI,GAAuJJ,MAAM,CAACW,QAAP,CAAgBC,KAAvK,GAA6K,QAA7K,GAAsLZ,MAAM,CAACa,WAA7L,GAAyM,aAAzM,GAAuNb,MAAM,CAACc,SAA9N,GAAwO,QAAxO,GAAiPX,IAAjP,GAAsP,EAArQ;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAZ;AACA,SAAO,MAAOiB,QAAP,IAAoB;AACvB,UAAMrB,GAAG,CAACsB,IAAJ,CAAS,KAAT,EAAgBZ,QAAhB,EAA2Ba,IAA3B,CAAiCC,MAAM,IAAI;AAC7CL,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;;AACA,UAAGA,MAAM,CAACC,IAAP,CAAYC,MAAZ,KAAuB,CAA1B,EAA4B;AACxBL,QAAAA,QAAQ,CAACnB,cAAc,CAACU,UAAf,CAA0BY,MAA1B,CAAD,CAAR;AACH;AACJ,KALK,CAAN;AAMH,GAPD;AAQH,CAbD;;AAeAtB,cAAc,CAACU,UAAf,GAA6BY,MAAD,IAAY;AACpC,SAAO;AACHG,IAAAA,IAAI,EAAE5B,kBAAkB,CAAC6B,WADtB;AAEHJ,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,eAAetB,cAAf","sourcesContent":["import paymentActionTypes from '../actionTypes/payment.actiontypes';\r\nimport Api from '../utils/Api';\r\nimport ApiConfig from '../config/ApiConfig';\r\n\r\nconst paymentActions = {};\r\n\r\npaymentActions.chargeCardRequest = (params) => {\r\n    let md5 = require('md5')\r\n    let sign = md5(params.username + ApiConfig.jwtToken)\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeCard + '?serial='+params.txtSerie+'&code='+params.txtCardPin+'&username='+params.username+'&productAgent='+params.gameInfo.agent+'&type='+params.sltCardType+'&server_id='+params.sltServer+'&sign='+sign+'';\r\n    console.log(params)\r\n    return async (dispatch) => {\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            console.log(result);\r\n            if(result.data.status === 1){\r\n                dispatch(paymentActions.chargeCard(result))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\npaymentActions.chargeCard = (result) => {\r\n    return {\r\n        type: paymentActionTypes.CHARGE_CARD,\r\n        result\r\n    }\r\n}\r\n\r\nexport default paymentActions;"]},"metadata":{},"sourceType":"module"}