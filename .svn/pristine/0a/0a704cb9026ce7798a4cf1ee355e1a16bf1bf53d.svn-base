{"ast":null,"code":"import paymentActionTypes from '../actionTypes/payment.actiontypes';\nimport Api from '../utils/Api';\nimport ApiConfig from '../config/ApiConfig';\nconst paymentActions = {};\n\npaymentActions.chargeCardRequest = params => {\n  let md5 = require('md5');\n\n  let sign = md5(params.username + ApiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeCard + '?serial=' + params.txtSerie + '&code=' + params.txtCardPin + '&username=' + params.username + '&productAgent=' + params.gameInfo.agent + '&type=' + params.sltCardType + '&server_id=' + params.sltServer + '&sign=' + sign + '';\n  return async dispatch => {\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(paymentActions.chargeCard(result));\n      }\n    });\n  };\n};\n\npaymentActions.chargeCard = result => {\n  return {\n    type: paymentActionTypes.CHARGE_CARD,\n    result\n  };\n};\n\npaymentActions.chargeAtmRequest = params => {\n  console.log(params);\n\n  let md5 = require('md5');\n\n  let sign = md5(params.username + ApiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeAtm + '?amount=' + params.sltAmount + '&username=' + params.username + '&productAgent=' + params.gameInfo.agent + '&roleId=' + params.roleId + '&server_id=' + params.sltServer + '&sign=' + sign + '';\n  return async dispatch => {\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(paymentActions.chargeCard(result));\n      }\n    });\n  };\n};\n\npaymentActions.chargeAtm = result => {\n  return {\n    type: paymentActionTypes.CHARGE_CARD,\n    result\n  };\n};\n\npaymentActions.getUserRoleRequest = (serverId, userId, agent) => {\n  let md5 = require('md5');\n\n  let sign = md5(userId + ApiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.getRole + '?server_id=' + serverId + '&id_user=' + userId + '&productAgent=' + agent + '&sign=' + sign;\n  return async dispatch => {\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(paymentActions.getUserRole(result));\n      }\n    });\n  };\n};\n\npaymentActions.getUserRole = result => {\n  return {\n    type: paymentActionTypes.GET_USER_ROLE,\n    result\n  };\n};\n\nexport default paymentActions;","map":{"version":3,"sources":["C:/reactjs/payv2/myapp/src/actions/payment.actions.js"],"names":["paymentActionTypes","Api","ApiConfig","paymentActions","chargeCardRequest","params","md5","require","sign","username","jwtToken","endpoint","domain","chargeCard","txtSerie","txtCardPin","gameInfo","agent","sltCardType","sltServer","dispatch","call","then","result","data","status","type","CHARGE_CARD","chargeAtmRequest","console","log","chargeAtm","sltAmount","roleId","getUserRoleRequest","serverId","userId","getRole","getUserRole","GET_USER_ROLE"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,oCAA/B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,MAAMC,cAAc,GAAG,EAAvB;;AAEAA,cAAc,CAACC,iBAAf,GAAoCC,MAAD,IAAY;AAC3C,MAAIC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,MAAIC,IAAI,GAAGF,GAAG,CAACD,MAAM,CAACI,QAAP,GAAkBP,SAAS,CAACQ,QAA7B,CAAd;AACA,MAAIC,QAAQ,GAAGT,SAAS,CAACU,MAAV,GAAmBV,SAAS,CAACS,QAAV,CAAmBE,UAAtC,GAAmD,UAAnD,GAA8DR,MAAM,CAACS,QAArE,GAA8E,QAA9E,GAAuFT,MAAM,CAACU,UAA9F,GAAyG,YAAzG,GAAsHV,MAAM,CAACI,QAA7H,GAAsI,gBAAtI,GAAuJJ,MAAM,CAACW,QAAP,CAAgBC,KAAvK,GAA6K,QAA7K,GAAsLZ,MAAM,CAACa,WAA7L,GAAyM,aAAzM,GAAuNb,MAAM,CAACc,SAA9N,GAAwO,QAAxO,GAAiPX,IAAjP,GAAsP,EAArQ;AACA,SAAO,MAAOY,QAAP,IAAoB;AACvB,UAAMnB,GAAG,CAACoB,IAAJ,CAAS,KAAT,EAAgBV,QAAhB,EAA2BW,IAA3B,CAAiCC,MAAM,IAAI;AAC7C,UAAGA,MAAM,CAACC,IAAP,CAAYC,MAAZ,KAAuB,CAA1B,EAA4B;AACxBL,QAAAA,QAAQ,CAACjB,cAAc,CAACU,UAAf,CAA0BU,MAA1B,CAAD,CAAR;AACH;AACJ,KAJK,CAAN;AAKH,GAND;AAOH,CAXD;;AAaApB,cAAc,CAACU,UAAf,GAA6BU,MAAD,IAAY;AACpC,SAAO;AACHG,IAAAA,IAAI,EAAE1B,kBAAkB,CAAC2B,WADtB;AAEHJ,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOApB,cAAc,CAACyB,gBAAf,GAAmCvB,MAAD,IAAY;AAC1CwB,EAAAA,OAAO,CAACC,GAAR,CAAYzB,MAAZ;;AACA,MAAIC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,MAAIC,IAAI,GAAGF,GAAG,CAACD,MAAM,CAACI,QAAP,GAAkBP,SAAS,CAACQ,QAA7B,CAAd;AACA,MAAIC,QAAQ,GAAGT,SAAS,CAACU,MAAV,GAAmBV,SAAS,CAACS,QAAV,CAAmBoB,SAAtC,GAAkD,UAAlD,GAA6D1B,MAAM,CAAC2B,SAApE,GAA8E,YAA9E,GAA2F3B,MAAM,CAACI,QAAlG,GAA2G,gBAA3G,GAA4HJ,MAAM,CAACW,QAAP,CAAgBC,KAA5I,GAAkJ,UAAlJ,GAA6JZ,MAAM,CAAC4B,MAApK,GAA2K,aAA3K,GAAyL5B,MAAM,CAACc,SAAhM,GAA0M,QAA1M,GAAmNX,IAAnN,GAAwN,EAAvO;AACA,SAAO,MAAOY,QAAP,IAAoB;AACvB,UAAMnB,GAAG,CAACoB,IAAJ,CAAS,KAAT,EAAgBV,QAAhB,EAA2BW,IAA3B,CAAiCC,MAAM,IAAI;AAC7C,UAAGA,MAAM,CAACC,IAAP,CAAYC,MAAZ,KAAuB,CAA1B,EAA4B;AACxBL,QAAAA,QAAQ,CAACjB,cAAc,CAACU,UAAf,CAA0BU,MAA1B,CAAD,CAAR;AACH;AACJ,KAJK,CAAN;AAKH,GAND;AAOH,CAZD;;AAcApB,cAAc,CAAC4B,SAAf,GAA4BR,MAAD,IAAY;AACnC,SAAO;AACHG,IAAAA,IAAI,EAAE1B,kBAAkB,CAAC2B,WADtB;AAEHJ,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOApB,cAAc,CAAC+B,kBAAf,GAAoC,CAACC,QAAD,EAAWC,MAAX,EAAmBnB,KAAnB,KAA6B;AAC7D,MAAIX,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,MAAIC,IAAI,GAAGF,GAAG,CAAC8B,MAAM,GAAGlC,SAAS,CAACQ,QAApB,CAAd;AACA,MAAIC,QAAQ,GAAGT,SAAS,CAACU,MAAV,GAAmBV,SAAS,CAACS,QAAV,CAAmB0B,OAAtC,GAAgD,aAAhD,GAAgEF,QAAhE,GAAyE,WAAzE,GAAqFC,MAArF,GAA4F,gBAA5F,GAA6GnB,KAA7G,GAAmH,QAAnH,GAA4HT,IAA3I;AACA,SAAO,MAAOY,QAAP,IAAoB;AACvB,UAAMnB,GAAG,CAACoB,IAAJ,CAAS,KAAT,EAAgBV,QAAhB,EAA2BW,IAA3B,CAAiCC,MAAM,IAAI;AAC7C,UAAGA,MAAM,CAACC,IAAP,CAAYC,MAAZ,KAAuB,CAA1B,EAA4B;AACxBL,QAAAA,QAAQ,CAACjB,cAAc,CAACmC,WAAf,CAA2Bf,MAA3B,CAAD,CAAR;AACH;AACJ,KAJK,CAAN;AAKH,GAND;AAOH,CAXD;;AAaApB,cAAc,CAACmC,WAAf,GAA8Bf,MAAD,IAAY;AACrC,SAAO;AACHG,IAAAA,IAAI,EAAE1B,kBAAkB,CAACuC,aADtB;AAEHhB,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,eAAepB,cAAf","sourcesContent":["import paymentActionTypes from '../actionTypes/payment.actiontypes';\r\nimport Api from '../utils/Api';\r\nimport ApiConfig from '../config/ApiConfig';\r\n\r\nconst paymentActions = {};\r\n\r\npaymentActions.chargeCardRequest = (params) => {\r\n    let md5 = require('md5')\r\n    let sign = md5(params.username + ApiConfig.jwtToken)\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeCard + '?serial='+params.txtSerie+'&code='+params.txtCardPin+'&username='+params.username+'&productAgent='+params.gameInfo.agent+'&type='+params.sltCardType+'&server_id='+params.sltServer+'&sign='+sign+'';\r\n    return async (dispatch) => {\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                dispatch(paymentActions.chargeCard(result))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\npaymentActions.chargeCard = (result) => {\r\n    return {\r\n        type: paymentActionTypes.CHARGE_CARD,\r\n        result\r\n    }\r\n}\r\n\r\npaymentActions.chargeAtmRequest = (params) => {\r\n    console.log(params)\r\n    let md5 = require('md5')\r\n    let sign = md5(params.username + ApiConfig.jwtToken)\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.chargeAtm + '?amount='+params.sltAmount+'&username='+params.username+'&productAgent='+params.gameInfo.agent+'&roleId='+params.roleId+'&server_id='+params.sltServer+'&sign='+sign+'';\r\n    return async (dispatch) => {\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                dispatch(paymentActions.chargeCard(result))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\npaymentActions.chargeAtm = (result) => {\r\n    return {\r\n        type: paymentActionTypes.CHARGE_CARD,\r\n        result\r\n    }\r\n}\r\n\r\npaymentActions.getUserRoleRequest = (serverId, userId, agent) => {\r\n    let md5 = require('md5')\r\n    let sign = md5(userId + ApiConfig.jwtToken)\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.getRole + '?server_id=' + serverId+'&id_user='+userId+'&productAgent='+agent+'&sign='+sign;\r\n    return async (dispatch) => {\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                dispatch(paymentActions.getUserRole(result))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\npaymentActions.getUserRole = (result) => {\r\n    return {\r\n        type: paymentActionTypes.GET_USER_ROLE,\r\n        result\r\n    }\r\n}\r\n\r\nexport default paymentActions;"]},"metadata":{},"sourceType":"module"}