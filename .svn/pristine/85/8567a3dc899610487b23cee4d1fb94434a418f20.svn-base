{"ast":null,"code":"import historyActionTypes from \"../actionTypes/history.actiontypes\";\nimport Api from '../utils/Api';\nimport ApiConfig from \"../config/ApiConfig\";\nimport apiConfig from \"../config/ApiConfig\";\nimport isloadingAction from \"../actions/isloading.actions\";\nconst historyActions = {};\n\nhistoryActions.getCardHistoryRequest = (username, game, formDate, toDate) => {\n  let md5 = require('md5');\n\n  let sign = md5(username + apiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.getCardHistory + '?productAgent=' + game + '&sign=' + sign + '&username=' + username + '&fromDate=' + formDate + '&toDate=' + toDate + '';\n  return async dispatch => {\n    dispatch(isloadingAction.showLoader());\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(historyActions.getCardHistory(result));\n      }\n    });\n    dispatch(isloadingAction.hideLoader());\n  };\n};\n\nhistoryActions.filterPayToGameHistoryRequest = (username, game, formDate, toDate) => {\n  let md5 = require('md5');\n\n  let sign = md5(username + apiConfig.jwtToken);\n  let endpoint = ApiConfig.domain + ApiConfig.endpoint.getPayToGameHistory + '?productAgent=' + game + '&sign=' + sign + '&username=' + username + '&fromDate=' + formDate + '&toDate=' + toDate + '';\n  return async dispatch => {\n    dispatch(isloadingAction.showLoader);\n    await Api.call('GET', endpoint).then(result => {\n      if (result.data.status === 1) {\n        dispatch(historyActions.getPayToGameHistory(result));\n      }\n    });\n    dispatch(isloadingAction.hideLoader);\n  };\n};\n\nhistoryActions.getPayToGameHistory = result => {\n  return {\n    type: historyActionTypes.GET_PAY_TO_GAME_HISTORY,\n    result\n  };\n};\n\nhistoryActions.getCardHistory = result => {\n  return {\n    type: historyActionTypes.GET_CARD_HISTORY,\n    result\n  };\n};\n\nexport default historyActions;","map":{"version":3,"sources":["C:/reactjs/payv2/myapp/src/actions/history.actions.js"],"names":["historyActionTypes","Api","ApiConfig","apiConfig","isloadingAction","historyActions","getCardHistoryRequest","username","game","formDate","toDate","md5","require","sign","jwtToken","endpoint","domain","getCardHistory","dispatch","showLoader","call","then","result","data","status","hideLoader","filterPayToGameHistoryRequest","getPayToGameHistory","type","GET_PAY_TO_GAME_HISTORY","GET_CARD_HISTORY"],"mappings":"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","sourcesContent":["import historyActionTypes from \"../actionTypes/history.actiontypes\";\r\nimport Api from '../utils/Api';\r\nimport ApiConfig from \"../config/ApiConfig\";\r\nimport apiConfig from \"../config/ApiConfig\";\r\nimport isloadingAction from \"../actions/isloading.actions\";\r\n\r\nconst historyActions = {};\r\n\r\nhistoryActions.getCardHistoryRequest = (username, game, formDate, toDate) => {\r\n    let md5 = require('md5');\r\n    let sign = md5(username+apiConfig.jwtToken);\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.getCardHistory + '?productAgent='+game+'&sign='+sign+'&username='+username+'&fromDate='+formDate+'&toDate='+toDate+'';\r\n    return async (dispatch) => {\r\n        dispatch(isloadingAction.showLoader())\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                dispatch(historyActions.getCardHistory(result))\r\n            }\r\n        })\r\n        dispatch(isloadingAction.hideLoader())\r\n    }\r\n}\r\n\r\nhistoryActions.filterPayToGameHistoryRequest = (username, game, formDate, toDate) => {\r\n    let md5 = require('md5');\r\n    let sign = md5(username+apiConfig.jwtToken);\r\n    let endpoint = ApiConfig.domain + ApiConfig.endpoint.getPayToGameHistory + '?productAgent='+game+'&sign='+sign+'&username='+username+'&fromDate='+formDate+'&toDate='+toDate+'';\r\n    return async (dispatch) => {\r\n        dispatch(isloadingAction.showLoader)\r\n        await Api.call('GET', endpoint ).then( result => {\r\n            if(result.data.status === 1){\r\n                dispatch(historyActions.getPayToGameHistory(result))\r\n            }\r\n        })\r\n        dispatch(isloadingAction.hideLoader)\r\n    }\r\n}\r\n\r\nhistoryActions.getPayToGameHistory = (result) => {\r\n    return {\r\n        type: historyActionTypes.GET_PAY_TO_GAME_HISTORY,\r\n        result\r\n    }\r\n}\r\n\r\nhistoryActions.getCardHistory = (result) => {\r\n    return {\r\n        type: historyActionTypes.GET_CARD_HISTORY,\r\n        result\r\n    }\r\n}\r\n\r\nexport default historyActions;"]},"metadata":{},"sourceType":"module"}